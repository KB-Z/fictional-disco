{"version":3,"sources":["components/LoginButton.js","components/AppHeader.js","App.js","serviceWorker.js","index.js"],"names":["LoginButton","state","authenticated","user","menuAnchorEl","login","props","auth","logout","handleMenuClose","handleMenuOpen","event","setState","currentTarget","this","checkAuthentication","isAuthenticated","getUser","Button","color","onClick","menuPosition","vertical","horizontal","IconButton","AccountCircle","Menu","anchorEl","anchorOrigin","transformOrigin","open","onClose","MenuItem","ListItemText","primary","secondary","name","Component","withAuth","withStyles","flex","setUserLocation","classes","AppBar","position","Toolbar","Typography","variant","component","Link","to","className","App","onClickMap","e","console","log","lngLat","setMarker","lng","lat","markers","push","events","stopPropagation","navigator","geolocation","getCurrentPosition","coords","latitude","long","longitude","newViewport","height","width","zoom","viewport","userLocation","CssBaseline","mapStyle","mapboxApiAccessToken","process","onViewportChange","onDblClick","doubleClickZoom","Object","keys","length","src","alt","map","index","key","path","ImplicitCallback","theme","main","padding","spacing","breakpoints","down","Boolean","window","location","hostname","match","oktaConfig","issuer","redirect_uri","origin","client_id","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8dac61d0.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport {\n  Button,\n  IconButton,\n  Menu,\n  MenuItem,\n  ListItemText,\n} from '@material-ui/core';\nimport { AccountCircle } from '@material-ui/icons';\nimport { withAuth } from '@okta/okta-react';\n\nclass LoginButton extends Component {\n  state = {\n    authenticated: null,\n    user: null,\n    menuAnchorEl: null,\n  };\n\n  componentDidUpdate() {\n    this.checkAuthentication();\n  }\n\n  componentDidMount() {\n    this.checkAuthentication();\n  }\n\n  async checkAuthentication() {\n    const authenticated = await this.props.auth.isAuthenticated();\n    if (authenticated !== this.state.authenticated) {\n      const user = await this.props.auth.getUser();\n      this.setState({ authenticated, user });\n    }\n  }\n\n  login = () => this.props.auth.login();\n  logout = () => {\n    this.handleMenuClose();\n    this.props.auth.logout();\n  };\n\n  handleMenuOpen = event => this.setState({ menuAnchorEl: event.currentTarget });\n  handleMenuClose = () => this.setState({ menuAnchorEl: null });\n\n  render() {\n    const { authenticated, user, menuAnchorEl } = this.state;\n\n    if (authenticated === null) return null;\n    if (!authenticated) return <Button color=\"inherit\" onClick={this.login}>Login</Button>;\n\n    const menuPosition = {\n      vertical: 'top',\n      horizontal: 'right',\n    };\n\n    return (\n      <div>\n        <IconButton onClick={this.handleMenuOpen} color=\"inherit\">\n          <AccountCircle />\n        </IconButton>\n        <Menu\n          anchorEl={menuAnchorEl}\n          anchorOrigin={menuPosition}\n          transformOrigin={menuPosition}\n          open={!!menuAnchorEl}\n          onClose={this.handleMenuClose}\n        >\n          <MenuItem onClick={this.logout}>\n            <ListItemText\n              primary=\"Logout\"\n              secondary={user && user.name}\n            />\n          </MenuItem>\n        </Menu>\n      </div>\n    );\n  }\n}\n\nexport default withAuth(LoginButton);\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport {\n  AppBar,\n  Button,\n  Toolbar,\n  Typography,\n  withStyles,\n} from '@material-ui/core';\nimport LoginButton from './LoginButton';\n\nconst styles = {\n  flex: {\n    flex: 1,\n  },\n};\n\nconst AppHeader = ({ setUserLocation, classes }) => (\n   <AppBar position=\"absolute\">\n     <Toolbar>\n       <Typography variant=\"h6\" color=\"inherit\">\n         Fanatik Fuel\n       </Typography>\n       <Button color=\"inherit\" onClick={setUserLocation} >My Location</Button>\n       // <Button color=\"inherit\" component={Link} to=\"/\">Home</Button>\n       <div className={classes.flex} />\n      <LoginButton />\n     </Toolbar>\n   </AppBar>\n );\n\nexport default withStyles(styles)(AppHeader);\n","import React, { Fragment, Component } from 'react';\nimport {\n  CssBaseline,\n  withStyles,\n} from '@material-ui/core';\nimport { Route } from 'react-router-dom';\nimport { SecureRoute, ImplicitCallback } from '@okta/okta-react';\nimport ReactMapGL, { Marker } from 'react-map-gl';\nimport AppHeader from './components/AppHeader';\n// import PostsManager from './pages/PostsManager';\nimport './App.css';\n\nconst styles = theme => ({\n  main: {\n    padding: theme.spacing(3),\n    [theme.breakpoints.down('xs')]: {\n      padding: theme.spacing(2),\n    },\n  },\n});\n\nclass Markers extends Component {\n  render() {\n    if(this.props.events){\n    const data = this.props.events;\n    return data.map(\n      event => <Marker key={event.name} longitude={event.lng} latitude={event.lat} ><img className=\"location-icon\" src=\"ICON-MEET-CARBON-3X.png\" alt=\"userImg\" /></Marker>\n      )\n    }\n  }\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      viewport: {\n        width: \"100vw\",\n        height: \"100vh\",\n        latitude: 33.748795,\n        longitude: -84.384904,\n        zoom: 10\n      },\n      userLocation: {},\n      markers: [],\n      events: []\n    }\n  }\n  onClickMap = (e) => {\n    console.log(e.lngLat);\n    let setMarker = {\n      lng: e.lngLat[0],\n      lat: e.lngLat[1]\n    };\n    this.state.markers.push(setMarker);\n    this.setState({\n      events: this.state.markers\n    });\n    console.log(this.state.events);\n    e.stopPropagation();\n  };\n  setUserLocation = () => {\n    navigator.geolocation.getCurrentPosition(position => {\n      let setUserLocation = {\n        lat: position.coords.latitude,\n        long: position.coords.longitude\n      };\n      let newViewport = {\n        height: \"100vh\",\n        width: \"100vw\",\n        latitude: position.coords.latitude,\n        longitude: position.coords.longitude,\n        zoom: 16\n      };\n      this.setState({\n        viewport: newViewport,\n        userLocation: setUserLocation\n      });\n    });\n  };\n  render(){\n    return(\n      <Fragment>\n        <CssBaseline />\n        <AppHeader setUserLocation={this.setUserLocation} />\n        <main>\n          <div className=\"map\">\n            <ReactMapGL\n            {...this.state.viewport}\n            mapStyle=\"mapbox://styles/zdonner179/ck4sq2ix3027r1cl58pru9005\"\n            mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_API_KEY}\n            onViewportChange={viewport => this.setState({viewport})}\n            onDblClick={this.onClickMap}\n            doubleClickZoom={false}>\n            {Object.keys(this.state.userLocation).length !== 0 ? (\n              <Marker\n                latitude={this.state.userLocation.lat}\n                longitude={this.state.userLocation.long}\n              >\n                <img className=\"location-icon\" src=\"ICON-MEET-CARBON-3X.png\" alt=\"userImg\" />\n              </Marker>\n            ) : (\n              <div>Empty</div>\n            )}\n            <>\n              {this.state.markers.map((event, index) => (\n                <Marker key={index}\n                  longitude={event.lng}\n                  latitude={event.lat}\n                >\n                  <img className=\"location-icon\" src=\"ICON-MEET-CARBON-3X.png\" alt=\"eventImg\" />\n                </Marker>\n              ))}\n            </>\n            </ReactMapGL>\n          </div>\n          <Route path=\"/implicit/callback\" component={ImplicitCallback} />\n        </main>\n      </Fragment>\n  )}\n};\n\nexport default withStyles(styles)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Security } from '@okta/okta-react';\n// import './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nconst oktaConfig = {\n  issuer: `${process.env.REACT_APP_OKTA_ORG_URL}/oauth2/default`,\n  redirect_uri: `${window.location.origin}/implicit/callback`,\n  client_id: process.env.REACT_APP_OKTA_CLIENT_ID,\n};\n\nReactDOM.render(\n  <BrowserRouter>\n    <Security {...oktaConfig}>\n      <App />\n    </Security>\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\nif (module.hot) module.hot.accept();\n"],"sourceRoot":""}